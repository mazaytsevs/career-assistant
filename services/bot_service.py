import os
import asyncio
import tempfile
from services.pdf_parser_service import pdf_to_text
from services.rag_match_service import index_resume_if_needed
import uuid
import httpx
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv
from config.logger import setup_logger
from services.message_service import send_message

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
logger = setup_logger(__name__)

# Conversation states for /find_job command
KEYWORDS, EXPERIENCE, SCHEDULE, RESUME = range(4)

# –ß–∏—Ç–∞–µ–º—ã–µ –ª–µ–π–±–ª—ã ‚Üí –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—ë—Ç HH API
EXPERIENCE_MAP = {
    "–ë–µ–∑ –æ–ø—ã—Ç–∞": "noExperience",
    "1-3 –≥–æ–¥–∞": "between1And3",
    "3-6 –ª–µ—Ç": "between3And6",
    "6+ –ª–µ—Ç": "moreThan6",
    "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã": None,
}

SCHEDULE_MAP = {
    "–£–¥–∞–ª—ë–Ω–∫–∞": "remote",
    "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å": "fullDay",
    "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫": "shift",
    "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã": None,
}

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    if not CHAT_ID:
        raise ValueError("TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TOKEN[:5]}...")
    logger.info(f"ID —á–∞—Ç–∞: {CHAT_ID}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∫–∞—Ä—å–µ—Ä–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_type = update.message.chat.type
    text = update.message.text

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({update.message.chat.id}) –≤ {message_type}: "{text}"')
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    response = f"–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}"
    await update.message.reply_text(response)
    await send_message("–ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥")

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}')

async def send_startup_message(application: Application):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        await application.bot.send_message(
            chat_id=CHAT_ID,
            text="üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        logger.info("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except httpx.ConnectError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        raise


# --- Conversation handler for /find_job ---
async def hh_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 0 ‚Äî —Å—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã /find_job"""
    await update.message.reply_text(
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º –≤–∞–∫–∞–Ω—Å–∏–∏!\n"
        "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: *Node.js developer*",
        parse_mode="Markdown"
    )
    return KEYWORDS

async def hh_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["keywords"] = update.message.text
    keyboard = [
        ["–ë–µ–∑ –æ–ø—ã—Ç–∞", "1-3 –≥–æ–¥–∞"],
        ["3-6 –ª–µ—Ç", "6+ –ª–µ—Ç"],
        ["–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return EXPERIENCE

async def hh_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    context.user_data["experience"] = EXPERIENCE_MAP.get(user_input)
    keyboard = [
        ["–£–¥–∞–ª—ë–Ω–∫–∞", "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å"],
        ["–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return SCHEDULE

async def hh_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    context.user_data["schedule"] = SCHEDULE_MAP.get(user_input)
    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ *—Ç–µ–∫—Å—Ç–æ–º* –∏–ª–∏ *—Ñ–∞–π–ª–æ–º*. "
        "–ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥ ‚Äî –Ω–∞–ø–∏—à–∏ `–Ω–µ—Ç`.",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    return RESUME

async def hh_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if update.message.document:
        file_obj = await update.message.document.get_file()
        file_bytes = await file_obj.download_as_bytearray()
        file_name = update.message.document.file_name or ""
        # --- PDF branch ---
        if file_name.lower().endswith(".pdf"):
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
                tmp.write(file_bytes)
                tmp_path = tmp.name
            try:
                resume_text = pdf_to_text(tmp_path)
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ pdf_to_text: %s", exc)
                resume_text = ""
            context.user_data["resume"] = resume_text
            logger.info(
                "–†–µ–∑—é–º–µ (PDF) –∏–∑–≤–ª–µ—á–µ–Ω–æ, –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: %s‚Ä¶",
                resume_text[:200]
            )
            # --- RAG indexing ---
            resume_id = index_resume_if_needed(resume_text, user_id=update.message.chat.id)
            logger.info("–†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –ø–æ–¥ ID=%s", resume_id)
            await update.message.reply_text("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        # --- fallback: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ---
        else:
            context.user_data["resume"] = file_bytes.decode("utf-8", errors="ignore")
            logger.info(
                "–†–µ–∑—é–º–µ (—Ñ–∞–π–ª) –ø–æ–ª—É—á–µ–Ω–æ: %s‚Ä¶",
                str(context.user_data["resume"])[:200]
            )
            # --- RAG indexing ---
            resume_id = index_resume_if_needed(context.user_data["resume"], user_id=update.message.chat.id)
            logger.info("–†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –ø–æ–¥ ID=%s", resume_id)
            await update.message.reply_text("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    else:
        txt = update.message.text or ""
        context.user_data["resume"] = None if txt.lower().strip() == "–Ω–µ—Ç" else txt
        logger.info(f"–†–µ–∑—é–º–µ (—Ç–µ–∫—Å—Ç) –ø–æ–ª—É—á–µ–Ω–æ: {str(context.user_data['resume'])[:200]}‚Ä¶")
        if context.user_data["resume"]:
            resume_id = index_resume_if_needed(context.user_data["resume"], user_id=update.message.chat.id)
            logger.info("–†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –ø–æ–¥ ID=%s", resume_id)
            await update.message.reply_text("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    await update.message.reply_text("–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶")

    from services.head_hunter import search_vacancies

    vacancies = search_vacancies(
        text=context.user_data["keywords"],
        experience=context.user_data["experience"],
        schedule=context.user_data["schedule"],
        per_page=10
    )

    items = vacancies.get("items", [])[:5]
    if not items:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª üòî")
    else:
        reply_parts = []
        for v in items:
            reply_parts.append(f"{v['name']} ‚Äî {v['employer']['name']}\n{v['alternate_url']}")
        await update.message.reply_text("\n\n".join(reply_parts))

    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç (–ø—Ä–∏–º–µ—Ä)
    await send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.chat.id} –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π.")

    return ConversationHandler.END

async def hh_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π"""
    check_environment()
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))

    hh_conv = ConversationHandler(
        entry_points=[CommandHandler('find_job', hh_start)],
        states={
            KEYWORDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_keywords)],
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_experience)],
            SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_schedule)],
            RESUME: [MessageHandler(~filters.COMMAND, hh_resume)],
        },
        fallbacks=[CommandHandler('cancel', hh_cancel)],
    )
    application.add_handler(hh_conv)

    application.add_handler(MessageHandler(filters.TEXT, handle_message))
    application.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, Telegram-bot API —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    application.run_polling(
        allowed_updates=Update.ALL_TYPES
    )