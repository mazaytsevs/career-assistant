"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
"""

import os
import asyncio
import tempfile
from services.pdf_parser_service import pdf_to_text
import uuid
import httpx
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram import BotCommand
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv
from config.logger import setup_logger
from services.message_service import send_message
from services.head_hunter import (
    search_vacancies,
    get_resume_list,
    get_resume_details,
    get_vacancy_details,
    apply_for_vacancy,
    auto_apply_vacancies,
)
from services.resume_vacancy_matcher import match_resume_to_vacancy
from services.vector_store import index_resume, search_similar_resumes
from config.hh_config import (
    HH_CLIENT_ID,
    HH_AUTH_URL,
    get_tokens,
    refresh_tokens,
    TOKENS_FILE
)

# --- Additional imports for RAG matching ---
import json
from services.rag_match_service import index_resume_if_needed

from services.resume_vacancy_matcher import (
    parse_resume,
    parse_vacancy,
    match_resume_to_vacancy,
)

from services.gigachat_service import generate_cover_letter

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
logger = setup_logger(__name__)

RESUME_ID = os.getenv("RESUME_ID")


WAITING_FOR_RESUME, WAITING_FOR_HH_AUTH_CODE = range(2)          # 0, 1
KEYWORDS, EXPERIENCE, EMPLOYMENT, SCHEDULE, SALARY, PREFS, RESUME = range(2, 9)  # 2‚Äì8
WAITING_FOR_COVER_LETTER = 9  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
WAITING_FOR_APPLY_CHOICE = 10
WAITING_FOR_AUTO_APPLY_COVER = 11  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞
WAITING_FOR_AUTO_APPLY_COUNT = 12  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞

# –ß–∏—Ç–∞–µ–º—ã–µ –ª–µ–π–±–ª—ã ‚Üí –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—ë—Ç HH API
EXPERIENCE_MAP = {
    "–ë–µ–∑ –æ–ø—ã—Ç–∞": "noExperience",
    "1-3 –≥–æ–¥–∞": "between1And3",
    "3-6 –ª–µ—Ç": "between3And6",
    "6+ –ª–µ—Ç": "moreThan6",
    "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã": None,
}

SCHEDULE_MAP = {
    "–£–¥–∞–ª—ë–Ω–∫–∞": "remote",
    "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å": "fullDay",
    "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫": "shift",
    "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã": None,
}

# –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
EMPLOYMENT_MAP = {
    "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "full",
    "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "part",
    "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞": "project",
    "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ": "volunteer",
    "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞": "probation",
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è GigaChat (‚âà 300 —Ç–æ–∫–µ–Ω–æ–≤)
MAX_VACANCY_CHARS = 1000

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –º—ç—Ç—á–µ–º ‚â• 50 %
MATCH_THRESHOLD = 0.5  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –º—ç—Ç—á–µ–º ‚â• 50 %

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not TOKEN:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    if not CHAT_ID:
        raise ValueError("TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TOKEN[:5]}...")
    logger.info(f"ID —á–∞—Ç–∞: {CHAT_ID}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start")
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data="search_vacancies")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫", callback_data="auto_apply")],
        [InlineKeyboardButton("üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data="upload_resume")],
        [InlineKeyboardButton("üîó –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ HH.ru", callback_data="hh_auth")]
    ]
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–æ–∫
    for row in keyboard:
        for button in row:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: text='{button.text}', callback_data='{button.callback_data}'")
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏")
    return WAITING_FOR_RESUME

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/find_job ‚Äî –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_type = update.message.chat.type
    text = update.message.text

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({update.message.chat.id}) –≤ {message_type}: "{text}"')
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    response = f"–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}"
    await update.message.reply_text(response)
    await send_message("–ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥")

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}')

async def send_startup_message(application: Application):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        await application.bot.send_message(
            chat_id=CHAT_ID,
            text="üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        logger.info("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except httpx.ConnectError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        raise

async def hh_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ HH.ru"""
    logger.info("–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ hh_auth")
    try:
        query = update.callback_query
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {query.data}")
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω—ã
        try:
            tokens = get_tokens()
            if tokens:
                await query.edit_message_text(
                    "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ HH.ru!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
                )
                return WAITING_FOR_RESUME
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_url = f"https://hh.ru/oauth/authorize?response_type=code&client_id={HH_CLIENT_ID}"
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_url}")
        
        keyboard = [[InlineKeyboardButton("üîó –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ HH.ru", url=auth_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ HH.ru:\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç HH.ru\n"
            "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n"
            "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
            "–ö–æ–¥ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: 1234567890",
            reply_markup=reply_markup
        )
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return WAITING_FOR_HH_AUTH_CODE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ hh_auth: {e}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
        return WAITING_FOR_RESUME

async def handle_auth_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    auth_code = update.message.text.strip()

    print(f"auth_code: {auth_code}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        tokens = refresh_tokens(auth_code)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
        os.makedirs(os.path.dirname(TOKENS_FILE), exist_ok=True)
        with open(TOKENS_FILE, 'w') as f:
            json.dump(tokens, f)
        
        await update.message.reply_text(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Å HH.ru.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return WAITING_FOR_RESUME
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return WAITING_FOR_RESUME

async def upload_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º.\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª."
    )
    return WAITING_FOR_RESUME

async def search_vacancies_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º –≤–∞–∫–∞–Ω—Å–∏–∏!\n"
        "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: Node.js developer"
    )
    return KEYWORDS

async def auto_apply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞
    context.user_data["is_auto_apply"] = True
    
    await query.edit_message_text(
        "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫!\n"
        "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: Node.js developer"
    )
    return KEYWORDS

async def set_bot_commands(app: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –º–µ–Ω—é Telegram‚Äë–∫–ª–∏–µ–Ω—Ç–∞."""
    await app.bot.set_my_commands(
        [
            BotCommand("start", "–ù–∞—á–∞—Ç—å"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("find_job", "–ü–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"),
        ]
    )

async def hh_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    context.user_data["keywords"] = update.message.text
    keyboard = [
        ["–ë–µ–∑ –æ–ø—ã—Ç–∞", "1-3 –≥–æ–¥–∞"],
        ["3-6 –ª–µ—Ç", "6+ –ª–µ—Ç"],
        ["–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return EXPERIENCE

async def hh_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    user_input = update.message.text.strip()
    context.user_data["experience"] = EXPERIENCE_MAP.get(user_input)
    keyboard = [
        ["–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å", "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å"],
        ["–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ"],
        ["–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return EMPLOYMENT

async def hh_employment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"""
    user_input = update.message.text.strip()
    context.user_data["employment"] = EMPLOYMENT_MAP.get(user_input)
    keyboard = [
        ["–£–¥–∞–ª—ë–Ω–∫–∞", "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å"],
        ["–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return SCHEDULE

async def hh_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"""
    user_input = update.message.text.strip()
    context.user_data["schedule"] = SCHEDULE_MAP.get(user_input)
    keyboard = [
        ["150000", "200000", "250000"],
        ["–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"]
    ]
    await update.message.reply_text(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (–º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã¬ª):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return SALARY

async def hh_salary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    user_input = update.message.text.strip()
    if user_input.lower() == "–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã":
        context.user_data["salary"] = None
    else:
        try:
            context.user_data["salary"] = int(user_input.replace("k", "").replace("K", "").replace(" ", ""))
        except ValueError:
            context.user_data["salary"] = None
    await update.message.reply_text(
        "–û–ø–∏—à–∏, —á—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏ (–æ–¥–Ω–æ‚Äë–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–µ —Ö–æ—á—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥¬ª, ¬´–Ω—É–∂–Ω–∞ —Å–∏–ª—å–Ω–∞—è —Å–æ—Ü–ø–∞–∫–µ—Ç¬ª, ¬´—Ç–æ–ª—å–∫–æ –ò–ü‚Äë–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ¬ª.\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏–π ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return PREFS

async def hh_prefs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    context.user_data["prefs"] = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞
    if context.user_data.get("is_auto_apply"):
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤.\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –±–µ–∑ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞."
        )
        return WAITING_FOR_AUTO_APPLY_COVER
    else:
        await update.message.reply_text(
            "–ó–∞–≥—Ä—É–∑–∏ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –∏–ª–∏ TXT, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç.\n"
            "–ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—é–º–µ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª."
        )
        return RESUME

async def hh_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
    if update.message.document:
        file_obj = await update.message.document.get_file()
        file_bytes = await file_obj.download_as_bytearray()
        file_name = update.message.document.file_name or ""
        # --- PDF branch ---
        if file_name.lower().endswith(".pdf"):
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
                tmp.write(file_bytes)
                tmp_path = tmp.name
            try:
                resume_text = pdf_to_text(tmp_path)
            except Exception as exc:
                logger.error("–û—à–∏–±–∫–∞ pdf_to_text: %s", exc)
                resume_text = ""
            context.user_data["resume"] = resume_text
            logger.info(
                "–†–µ–∑—é–º–µ (PDF) –∏–∑–≤–ª–µ—á–µ–Ω–æ, –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: %s‚Ä¶",
                resume_text[:200]
            )
            # --- RAG indexing ---
            resume_id = index_resume_if_needed(resume_text, user_id=update.message.chat.id)
            context.user_data["resume_id"] = resume_id
            logger.info("–†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –ø–æ–¥ ID=%s", resume_id)
            await update.message.reply_text("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        # --- fallback: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ---
        else:
            context.user_data["resume"] = file_bytes.decode("utf-8", errors="ignore")
            logger.info(
                "–†–µ–∑—é–º–µ (—Ñ–∞–π–ª) –ø–æ–ª—É—á–µ–Ω–æ: %s‚Ä¶",
                str(context.user_data["resume"])[:200]
            )
            # --- RAG indexing ---
            resume_id = index_resume_if_needed(context.user_data["resume"], user_id=update.message.chat.id)
            context.user_data["resume_id"] = resume_id
            logger.info("–†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –ø–æ–¥ ID=%s", resume_id)
            await update.message.reply_text("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    else:
        txt = update.message.text or ""
        context.user_data["resume"] = None if txt.lower().strip() == "–Ω–µ—Ç" else txt
        logger.info(f"–†–µ–∑—é–º–µ (—Ç–µ–∫—Å—Ç) –ø–æ–ª—É—á–µ–Ω–æ: {str(context.user_data['resume'])[:200]}‚Ä¶")
        if context.user_data["resume"]:
            resume_id = index_resume_if_needed(context.user_data["resume"], user_id=update.message.chat.id)
            context.user_data["resume_id"] = resume_id
            logger.info("–†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –ø–æ–¥ ID=%s", resume_id)
            await update.message.reply_text("–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    await update.message.reply_text("–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        resumes = get_resume_list()
        if resumes:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            hh_resume_id = resumes.items[0]["id"]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HH resume ID –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤
            context.user_data["hh_resume_id"] = hh_resume_id
            vacancies = search_vacancies(
                text=context.user_data["keywords"],
                experience=context.user_data["experience"],
                employment=context.user_data["employment"],
                schedule=context.user_data["schedule"],
                salary=context.user_data.get("salary"),
                per_page=20,
                enrich=True,
                resume_id=hh_resume_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            )
        else:
            # –ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            vacancies = search_vacancies(
                text=context.user_data["keywords"],
                experience=context.user_data["experience"],
                employment=context.user_data["employment"],
                schedule=context.user_data["schedule"],
                salary=context.user_data.get("salary"),
                per_page=20,
                enrich=True
            )
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {exc}")
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
        vacancies = search_vacancies(
            text=context.user_data["keywords"],
            experience=context.user_data["experience"],
            employment=context.user_data["employment"],
            schedule=context.user_data["schedule"],
            salary=context.user_data.get("salary"),
            per_page=20,
            enrich=True
        )

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ –¥–ª—è –º—ç—Ç—á–∏–Ω–≥–∞
    resume_struct = parse_resume(context.user_data.get("resume") or "")

    # --- –ú—ç—Ç—á–∏–Ω–≥ —Ä–µ–∑—é–º–µ ‚Üî –≤–∞–∫–∞–Ω—Å–∏–π ---
    items = vacancies.get("items", [])
    good_items = []

    prefs_text = context.user_data.get("prefs", "")
    search_title = context.user_data.get("keywords", "")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫

    for v in items:
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
        vac_raw = f"{v['name']}\n{v.get('description') or ''}"
        vacancy_struct = parse_vacancy(vac_raw)
        vacancy_struct["raw_text"] = vac_raw  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ prefs

        # –°—á–∏—Ç–∞–µ–º –º—ç—Ç—á
        match = match_resume_to_vacancy(
            resume_struct,
            vacancy_struct,
            prefs_text=prefs_text,
            search_title=search_title  # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        )
        score = match["score"]

        if score >= MATCH_THRESHOLD:
            v["match_score"] = score
            v["title_score"] = match["title_score"]  # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
            v["matched_skills"] = match["matched_skills"]
            v["missing_skills"] = match["missing_skills"]
            good_items.append(v)

    if not good_items:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª üòî")
    else:
        # –ü–æ–∫–∞–∂–µ–º —Ç–æ–ø‚Äë5, –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
        good_items.sort(key=lambda x: x["match_score"], reverse=True)
        for it in good_items[:5]:
            percent = it["match_score"]
            title_percent = it.get("title_score", 0)
            emoji = "üü¢" if percent >= 0.80 else ("üü°" if percent >= 0.50 else "üî¥")
            name_md = escape_markdown(it['name'], version=2)
            ms_md = escape_markdown(", ".join(it.get("matched_skills", []) or ["‚Äî"]), version=2)
            miss_md = escape_markdown(", ".join(it.get("missing_skills", []) or ["‚Äî"]), version=2)
            url_md = escape_markdown(it['alternate_url'], version=2)
            percent_md = escape_markdown(f"{int(percent*100)}%", version=2)
            title_percent_md = escape_markdown(f"{int(title_percent*100)}%", version=2)

            text_md = (
                f"{emoji} *{name_md}*\n"
                f"{percent_md} –º—ç—Ç—á–∞ \(–∑–∞–≥–æ–ª–æ–≤–æ–∫: {title_percent_md}\)\n"
                f"–°–æ–≤–ø–∞–ª–æ: {ms_md}\n"
                f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {miss_md}\n"
                f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é]({url_md})"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û–¢–ö–õ–ò–ö–ù–£–¢–¨–°–Ø"
            keyboard = [[InlineKeyboardButton("üìù –û–¢–ö–õ–ò–ö–ù–£–¢–¨–°–Ø", callback_data=f"show_vacancy:{it['id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await update.message.reply_text(text_md, parse_mode="MarkdownV2", reply_markup=reply_markup)

    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç (–ø—Ä–∏–º–µ—Ä)
    await send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.chat.id} –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π.")

    return WAITING_FOR_RESUME

async def show_vacancy_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ"""
    query = update.callback_query
    await query.answer()

    # --- –õ–æ–≥–∏—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º callback_data ---
    cb_data = query.data
    logger.info("show_vacancy_details: callback_data=%s", cb_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if ':' not in cb_data:
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é.")
        return WAITING_FOR_RESUME

    vacancy_id = cb_data.split(':')[1]

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
    try:
        vacancy = get_vacancy_details(vacancy_id)
    except Exception as exc:
        logger.error("get_vacancy_details error id=%s: %s", vacancy_id, exc)
        await query.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é."
        )
        return WAITING_FOR_RESUME

    if not vacancy:
        await query.message.reply_text(
            "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞."
        )
        return WAITING_FOR_RESUME

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏
    context.user_data["current_vacancy_id"] = vacancy_id
    context.user_data["current_vacancy_url"] = vacancy.get("alternate_url")

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
    name = escape_markdown(vacancy.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), version=2)
    employer = escape_markdown(vacancy.get("employer", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), version=2)

    salary_obj = vacancy.get("salary") or {}
    salary_from = salary_obj.get("from")
    salary_to = salary_obj.get("to")
    salary_currency = salary_obj.get("currency", "RUR")
    if salary_from or salary_to:
        salary_txt = f"{salary_from or ''}‚Äì{salary_to or ''} {salary_currency}"
    else:
        salary_txt = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    description = escape_markdown(
        vacancy.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"), version=2
    )[:MAX_VACANCY_CHARS]

    requirement = escape_markdown(
        vacancy.get("snippet", {}).get("requirement", "–ù–µ —É–∫–∞–∑–∞–Ω—ã"), version=2
    )

    text = (
        f"*{name}*\n\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {employer}\n"
        f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_txt}\n\n"
        f"*–û–ø–∏—Å–∞–Ω–∏–µ:* \n{description}\n\n"
        f"*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* \n{requirement}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ?"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É", callback_data=f"write_cover:{vacancy_id}"),
            InlineKeyboardButton("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å AI", callback_data=f"generate_cover:{vacancy_id}"),
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_cover")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="MarkdownV2")
    return WAITING_FOR_COVER_LETTER

async def handle_cover_letter_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—É"""
    query = update.callback_query
    await query.answer()

    action = query.data.split(':')[0]  # write_cover, generate_cover, cancel_cover
    vacancy_id = context.user_data.get('current_vacancy_id')

    # –û—Ç–º–µ–Ω–∞
    if action == 'cancel_cover':
        await query.message.reply_text(
            "–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        context.user_data.pop('current_vacancy_id', None)
        context.user_data.pop('generated_cover_letter', None)
        return ConversationHandler.END

    if not vacancy_id:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏")
        return ConversationHandler.END

    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∏—Å—å–º–∞
    if action == 'write_cover':
        await query.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        )
        return WAITING_FOR_COVER_LETTER

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞
    resume_text = context.user_data.get('resume')
    if not resume_text:
        await query.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ¬ª."
        )
        return ConversationHandler.END

    vacancy_details = get_vacancy_details(vacancy_id)
    if not vacancy_details:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏")
        return ConversationHandler.END

    await query.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ‚Ä¶")
    cover_letter = generate_cover_letter(resume_text, vacancy_details)

    if not cover_letter:
        await query.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
        )
        return WAITING_FOR_COVER_LETTER

    await query.message.reply_text(
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:\n\n{cover_letter}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–∏—Å—å–º–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ."
    )
    context.user_data['generated_cover_letter'] = cover_letter
    return WAITING_FOR_COVER_LETTER

async def handle_cover_letter_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ"""
    cover_letter = update.message.text
    vacancy_id = context.user_data.get('current_vacancy_id')

    if not vacancy_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ
    context.user_data['final_cover_letter'] = cover_letter

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    vacancy_url = context.user_data.get('current_vacancy_url', '')
    keyboard = [
        [InlineKeyboardButton("üñê –û—Ç–∫–ª–∏–∫–Ω—É—Å—å —Å–∞–º", callback_data=f"apply_manual:{vacancy_id}")],
        [InlineKeyboardButton("ü§ñ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"apply_auto:{vacancy_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="apply_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
        "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏–º —Å –æ—Ç–∫–ª–∏–∫–æ–º?",
        reply_markup=reply_markup
    )
    return WAITING_FOR_APPLY_CHOICE


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ apply context ---
def _clear_apply_context(context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –æ—Ç–∫–ª–∏–∫–æ–º"""
    for key in ("current_vacancy_id", "current_vacancy_url",
                "generated_cover_letter", "final_cover_letter"):
        context.user_data.pop(key, None)


# --- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ—Ç–∫–ª–∏–∫–∞ ---
async def handle_apply_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ—Ç–∫–ª–∏–∫–∞"""
    query = update.callback_query
    await query.answer()

    action = query.data.split(':')[0]          # apply_manual / apply_auto / apply_cancel
    vacancy_id = context.user_data.get('current_vacancy_id')
    resume_id = context.user_data.get('hh_resume_id')
    cover_letter = context.user_data.get('final_cover_letter')
    vacancy_url = context.user_data.get('current_vacancy_url', '')

    # –û—Ç–º–µ–Ω–∞
    if action == 'apply_cancel':
        await query.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
        _clear_apply_context(context)
        return ConversationHandler.END

    # –†—É—á–Ω–æ–π –æ—Ç–∫–ª–∏–∫
    if action == 'apply_manual':
        if vacancy_url:
            await query.message.reply_text(
                f"–û—Ç–∫–ª–∏–∫–Ω–∏—Å—å –≤—Ä—É—á–Ω—É—é –ø–æ —Å—Å—ã–ª–∫–µ:\n{vacancy_url}"
            )
        else:
            await query.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é üòî")
        _clear_apply_context(context)
        return ConversationHandler.END

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–ª–∏–∫
    if action == 'apply_auto':
        print(context.user_data["resume_id"])
        success = apply_for_vacancy(vacancy_id, resume_id, cover_letter)
        if success:
            await query.message.reply_text("‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        _clear_apply_context(context)
        return ConversationHandler.END

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    return ConversationHandler.END

async def handle_auto_apply_cover(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞"""
    cover_letter = update.message.text.strip()
    if cover_letter.lower() != "–Ω–µ—Ç":
        context.user_data["auto_apply_cover_letter"] = cover_letter
    
    keyboard = [
        ["2", "5"],
        ["25", "50"],
        ["200"]
    ]
    await update.message.reply_text(
        "–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return WAITING_FOR_AUTO_APPLY_COUNT

async def handle_auto_apply_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞"""
    try:
        count = int(update.message.text.strip())
        if count not in [2, 5, 25, 50, 200]:
            raise ValueError("Invalid count")
        context.user_data["auto_apply_count"] = count
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: 2, 5, 25, 50 –∏–ª–∏ 200"
        )
        return WAITING_FOR_AUTO_APPLY_COUNT

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    success = auto_apply_vacancies(
        resume_id=RESUME_ID,
        keywords=context.user_data.get('keywords'),
        count=context.user_data.get('auto_apply_count'),
        experience=context.user_data.get('experience'),
        employment=context.user_data.get('employment'),
        schedule=context.user_data.get('schedule'),
        salary=context.user_data.get('salary'),
        prefs=context.user_data.get('prefs'),
        cover_letter=context.user_data.get('auto_apply_cover_letter')
    )

    if success:
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞")

    return ConversationHandler.END

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π"""
    check_environment()
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()

    application.post_init = set_bot_commands

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_RESUME: [
                CallbackQueryHandler(hh_auth, pattern="^hh_auth$"),
                CallbackQueryHandler(upload_resume, pattern="^upload_resume$"),
                CallbackQueryHandler(search_vacancies_handler, pattern="^search_vacancies$"),
                CallbackQueryHandler(auto_apply_handler, pattern="^auto_apply$"),
                CallbackQueryHandler(show_vacancy_details, pattern="^show_vacancy:"),
                MessageHandler(filters.Document.ALL, hh_resume),
                MessageHandler(filters.TEXT & ~filters.COMMAND, hh_resume),
            ],
            WAITING_FOR_HH_AUTH_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auth_code),
            ],
            KEYWORDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_keywords)],
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_experience)],
            EMPLOYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_employment)],
            SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_schedule)],
            SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_salary)],
            PREFS: [MessageHandler(filters.TEXT & ~filters.COMMAND, hh_prefs)],
            RESUME: [MessageHandler(~filters.COMMAND, hh_resume)],
            WAITING_FOR_COVER_LETTER: [
                CallbackQueryHandler(handle_cover_letter_choice, pattern=r"^(write_cover|generate_cover|cancel_cover)(:.+)?$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cover_letter_text),
            ],
            WAITING_FOR_APPLY_CHOICE: [
                CallbackQueryHandler(handle_apply_choice, pattern=r"^(apply_manual|apply_auto|apply_cancel)(:.+)?$"),
            ],
            WAITING_FOR_AUTO_APPLY_COVER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auto_apply_cover),
            ],
            WAITING_FOR_AUTO_APPLY_COUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auto_apply_count),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
        name="main_conversation",
        persistent=False,
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
        elif update and update.callback_query:
            await update.callback_query.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )

    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, Telegram-bot API —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    application.run_polling(
        allowed_updates=Update.ALL_TYPES
    )